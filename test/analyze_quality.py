import pandas as pd
import argparse
import sys

def analyze_results(input_file, sheet_name, output_file, top_n):
    """
    Analyzes the evaluation results to find low-quality motion sequences.

    This function reads a specific sheet from an evaluation Excel file,
    calculates normalized scores for each metric based on the maximum value,
    computes a composite quality score, and saves a ranked list to a new Excel file.
    """
    print(f"Reading data from '{input_file}', sheet='{sheet_name}'...")
    try:
        df = pd.read_excel(input_file, sheet_name=sheet_name, engine='openpyxl')
    except FileNotFoundError:
        print(f"Error: Input file not found at '{input_file}'")
        sys.exit(1)
    except ValueError as e:
        print(f"Error: Sheet '{sheet_name}' not found in the Excel file. Details: {e}")
        sys.exit(1)
    except ImportError:
        print("Error: 'openpyxl' is required to read/write Excel files. Please install it using 'pip install openpyxl'")
        sys.exit(1)

    # Define the metric columns to be analyzed
    metric_columns = ['L2P', 'L2Q', 'NPSS', 'Foot Skate']
    score_columns = []

    print("Calculating normalized scores based on max value...")
    for metric in metric_columns:
        if metric not in df.columns:
            print(f"Warning: Metric column '{metric}' not found in the sheet. Skipping.")
            continue
        
        # Define the new column name for the score
        score_col_name = f"{metric}_score"
        score_columns.append(score_col_name)
        
        # ====================================================================
        # ==================== 这是修改后的分数计算规则 ======================
        # ====================================================================
        
        # 1. 找到该项指标的最大值
        max_value = df[metric].max()
        
        # 2. 计算分数 = 当前值 / 最大值
        #    为防止除以零，如果最大值为0，则所有分数也为0。
        if max_value > 0:
            df[score_col_name] = df[metric] / max_value
        else:
            df[score_col_name] = 0.0
            
        # ====================================================================
        # ========================== 规则修改结束 ============================
        # ====================================================================

    if not score_columns:
        print("Error: No valid metric columns found to perform analysis.")
        sys.exit(1)

    # Calculate the Composite Quality Score by averaging the new normalized scores
    print("Calculating Composite Quality Score...")
    df['Composite_Score'] = df[score_columns].mean(axis=1)

    # Sort the DataFrame by the Composite Quality Score in descending order
    # The highest score represents the lowest quality
    print("Ranking sequences by quality score...")
    df_sorted = df.sort_values(by='Composite_Score', ascending=False).reset_index(drop=True)

    # Save the full sorted analysis to the output Excel file
    try:
        df_sorted.to_excel(output_file, index=False, float_format="%.4f")
        print(f"Full analysis saved to '{output_file}'")
    except Exception as e:
        print(f"Error saving output file: {e}")
        sys.exit(1)

    # Display the top N worst-performing sequences in the console
    print(f"\n--- Top {top_n} Lowest-Quality Sequences (from sheet: {sheet_name}) ---")
    
    # 更新显示的列，以包含新的分数
    display_columns = ['Batch', 'Sequence', 'Method', 'Composite_Score'] + metric_columns + score_columns
    print(df_sorted.head(top_n).to_string(columns=display_columns, index=False))
    print("------------------------------------------------------------------")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Analyze motion generation quality from an evaluation Excel file.")
    
    parser.add_argument(
        "--input_file",
        type=str,
        required=True,
        help="Path to the input .xlsx file generated by benchmark.py."
    )
    parser.add_argument(
        "--sheet_name",
        type=str,
        default="Transition_90",
        help="The name of the sheet to analyze within the Excel file (e.g., 'Transition_90')."
    )
    parser.add_argument(
        "--output_file",
        type=str,
        default="quality_analysis_max_norm.xlsx", # 更新默认输出文件名
        help="Path to save the output .xlsx file with the ranked results."
    )
    parser.add_argument(
        "--top_n",
        type=int,
        default=20,
        help="The number of lowest-quality sequences to display in the console."
    )

    args = parser.parse_args()

    analyze_results(args.input_file, args.sheet_name, args.output_file, args.top_n)